<?xml version="1.0" encoding="UTF-8"?>
<!-- JGraLab - The Java Graph Laboratory                                      -->
<!--                                                                          -->
<!-- Copyright (C) 2006-2010 Institute for Software Technology                -->
<!--                         University of Koblenz-Landau, Germany            -->
<!--                         ist@uni-koblenz.de                               -->
<!--                                                                          -->
<!-- This program is free software; you can redistribute it and/or modify it  -->
<!-- under the terms of the GNU General Public License as published by the    -->
<!-- Free Software Foundation; either version 3 of the License, or (at your   -->
<!-- option) any later version.                                               -->
<!--                                                                          -->
<!-- This program is distributed in the hope that it will be useful, but      -->
<!-- WITHOUT ANY WARRANTY; without even the implied warranty of               -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General -->
<!-- Public License for more details.                                         -->
<!--                                                                          -->
<!-- You should have received a copy of the GNU General Public License along  -->
<!-- with this program; if not, see <http://www.gnu.org/licenses>.            -->
<!--                                                                          -->
<!-- Additional permission under GNU GPL version 3 section 7                  -->
<!--                                                                          -->
<!-- If you modify this Program, or any covered work, by linking or combining -->
<!-- it with Eclipse (or a modified version of that program or an Eclipse     -->
<!-- plugin), containing parts covered by the terms of the Eclipse Public     -->
<!-- License (EPL), the licensors of this Program grant you additional        -->
<!-- permission to convey the resulting work.  Corresponding Source for a     -->
<!-- non-source form of such a combination shall include the source code for  -->
<!-- the parts of JGraLab used as well as that of the covered work.           -->


<project name="jgralab" basedir="." default="build">

	<!-- override default properties -->
	<property name="projectname" value="jgralab" />
	<property name="main" value="JGraLab" />
	<property name="documentexcludes" value="de.uni_koblenz.jgralab.greql2.schema.*,de.uni_koblenz.jgralab.grumlschema.*" />
	<property name="unjarexcludes" value="clover/**" />
	<property name="test.suite" value="de.uni_koblenz.jgralabtest.RunTests" />     

	
	<!-- import the common build file -->
	<import file="../common/common.xml" />

	<property name="license.file" value="../jgralab/license/header/gpl-3.0-header.txt" />

	<!-- enable clover for the testcases: run with "ant with.clover build test" -->
	<property name="clover.jar" value="${lib.dir}/clover/clover-3.0.1.jar" />
	<taskdef resource="cloverlib.xml" classpath="${clover.jar}" />

	<target name="with.clover">
    	  <clover-setup/>
	</target>
	
	<target name="clover.html">
    	  <clover-html-report outdir="${project.dir}/build/clover-report"
                              title="JGraLab Clover Report"/>
	</target>


	<!-- classpath additions -->
	<!-- here all needed common libs are included, except ist_utilities -->
	<path id="classpathExtension">
		<fileset dir="${comlib.dir}/apache/commons/cli/" includes="**/*.jar" />
		<fileset dir="${comlib.dir}/apache/ant" includes="**/*.jar" />
		<fileset dir="${comlib.dir}/jdom/" includes="**/*.jar" />
		<fileset dir="${comlib.dir}/junit/" includes="**/*.jar" />
		<pathelement path="${clover.jar}"/>
	</path>

	<!-- set project specific properties -->

	<property name="greql2.schemafile" value="${src.dir}/de/uni_koblenz/jgralab/greql2/greql2Schema.tg" />
	<property name="gruml.schemafile" value="${src.dir}/de/uni_koblenz/jgralab/utilities/tg2schemagraph/GrumlSchema.tg" />

	<!-- the directory location for the testschemas -->
	<property name="testschemas.dir" value="${testcases.dir}/testschemas" />

	<!-- compile src.dir and include statements for the targets
	     it is always "targetname.src" and "targetname.includes" -->
	<property name="core.src" value="${src.dir}/de/uni_koblenz/jgralab" />
	<property name="core.includes" value="*.java graphmarker/** schema/** codegenerator/** impl/** jniserver/** trans/**" />

	<property name="tgtools.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="tgtools.includes" value="tgschema2java/** ant/TgSchema2JavaTask.java  ant/DeleteGeneratedSchemaTask.java tg2whatever/** tg2dot/**" />
  <!-- 	<property name="tgtools.includes" value="tgschema2java/** ant/TgSchema2JavaTask.java ant/DeleteGeneratedSchemaTask.java tg2dot/** tg2whatever/**" />     -->     
	<property name="greql2.src" value="${src.dir}/de/uni_koblenz/jgralab/greql2" />

	<property name="gruml.src" value="${src.dir}/de/uni_koblenz/jgralab/grumlschema/" />

	<property name="graphvalidator.src" value="${src.dir}/de/uni_koblenz/jgralab" />
	<property name="graphvalidator.includes" value="graphvalidator/**" />

	<property name="rsa.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="rsa.includes" value="rsa/** tg2schemagraph/** common/**" />   
	
	<property name="dhht.src" value="${src.dir}/de/uni_koblenz/jgralab/" />
	<property name="dhht.includes" value="dhhttest/**" />    
	<property name="dhht.schemafile" value="${src.dir}/de/uni_koblenz/jgralab/dhhttest/dhhttestschema.tg" />    

	<property name="utilities.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="utilities.includes" value="ant/** common/** converter/** schemacompare/**" />           
  <!--   <property name="utilities.includes" value="ant/** common/** converter/** greqlinterface/** jgralab2owl/** schemacompare/** tg2gdl/** tg2gxl/** tg2sidiff/** tgmerge/** tgraphbrowser/** xmi2tgschema/** xml/**" />                                  -->

	<!-- The targets -->
	<target name="build" depends="ist_utilities,clean,compile,jar"/>

	<target name="clean">
		<delete dir="${classes.dir}" />
		<delete dir="${tmp.dir}" />
		<delete dir="${testclasses.dir}" />
		<delete dir="${src.dir}/de/uni_koblenz/jgralab/greql2/schema" />
		<delete dir="${src.dir}/de/uni_koblenz/jgralab/grumlschema" />
		<delete dir="${testcases.dir}/de/uni_koblenz/jgralabtest/schemas" />
	</target>

	<!-- compile -->
 <!--  <target name="compile" depends="core,tgtools,greql2,graphvalidator,rsa,utilities,generatetestschemas" />        -->
	<target name="compile" depends="core,tgtools,gruml,dhhttest" />
	

	<!-- jgralab -->
	<!-- compiles jgralab basic sources -->
	<target name="core" depends="createClassesDir">
		<javac fork="true" srcdir="${core.src}" includes="${core.includes}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>

	<!-- tgtools (utils which are needed for schema creation (TgSchema2Java)
	         and that don't depend on schemas themselves) -->
	<target name="tgtools" depends="core">
		<javac fork="true" srcdir="${tgtools.src}" includes="${tgtools.includes}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
		<taskdef name="tgschema2java" classname="de.uni_koblenz.jgralab.utilities.ant.TgSchema2JavaTask" classpath="${classes.dir}" />
		<taskdef name="deletegeneratedschema" classname="de.uni_koblenz.jgralab.utilities.ant.DeleteGeneratedSchemaTask" classpath="${classes.dir}" />
	</target>

	<!-- compiles greql2 sources -->
	<target name="greql2" depends="tgtools">
		<tgschema2java schemaFile="${greql2.schemafile}" sourcePath="${src.dir}" implementationMode="standard" />
		<javac fork="true" srcdir="${greql2.src}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>

	<!-- graphvalidator -->
	<target name="graphvalidator" depends="greql2">
		<javac fork="true" srcdir="${graphvalidator.src}" includes="${graphvalidator.includes}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>     
	
	<target name="dhhttest" depends="core">    
	   	<tgschema2java schemaFile="${dhht.schemafile}" sourcePath="${src.dir}" implementationMode="standard" />     
		<javac fork="true" srcdir="${dhht.src}" includes="${dhht.includes}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>

	<target name="rsa" depends="gruml,graphvalidator">
		<javac fork="true" srcdir="${rsa.src}" includes="${rsa.includes}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>

	<!-- compiles utility sources -->
	<target name="utilities" depends="rsa,gruml">
		<javac fork="true" srcdir="${utilities.src}" includes="${utilities.includes}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>

	<!-- generates the gruml schema and compiles it -->
	<target name="gruml" depends="tgtools">
		<tgschema2java schemaFile="${gruml.schemafile}" sourcePath="${src.dir}" implementationMode="standard" />
		<javac fork="true" srcdir="${gruml.src}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" target="${javac.targetVM}">
			<compilerarg line="-Xlint:unchecked"/>
		</javac>
	</target>

	<!-- generates the schemas required for test cases without compiling them -->
	<target name="generatetestschemas" depends="tgtools">
		<tgschema2java sourcePath="${testcases.dir}" implementationMode="standard">
			<fileset dir="${testschemas.dir}" includes="*.tg" />
		</tgschema2java>
	</target>

	<!-- unjar -->
	<!-- prepares additional common libraries to be added to the jar file -->
	<target name="unjar" depends="common.unjar">
		<unjar dest="${tmp.dir}">
			<fileset dir="${comlib.dir}/apache/commons/cli/" includes="**/*.jar" />
			<fileset dir="${comlib.dir}/jdom/" includes="**/*.jar" />
		</unjar>
		<copy todir="${tmp.dir}/META-INF/license">
			<fileset dir="license" includes="jdom/** jgralab/**" />
		</copy>
	</target>

	<!-- release -->
	<!-- calls targets modify, clean, jar, test and document -->
	<target name="release" depends="modify,cleanall,jar,sourcejar,document" />
</project>
