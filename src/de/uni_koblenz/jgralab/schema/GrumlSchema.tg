DHHTGraph 1;

Schema de.uni_koblenz.jgralab.grumlschema.GrumlSchema;

GraphClass SchemaGraph {version: Integer};

Package ;
Package structure;
Comment structure.Direction "Direction viewed from vertex class.";
EnumDomain structure.Direction (VERTEX_TO_EDGE, EDGE_TO_VERTEX);
EnumDomain structure.IncidenceType (EDGE, AGGREGATION, COMPOSITION);


VertexClass Schema {name: String, packagePrefix: String};
VertexClass Package: NamedElementClass ["A Package must either be default or subpackage, but not both" "import structure.*; forall p: V{Package} @ (inDegree{ContainsDefaultPackage}(p) + inDegree{ContainsSubPackage}(p)) = 1" "import structure.*; from p: V{Package} with (inDegree{ContainsDefaultPackage}(p) + inDegree{ContainsSubPackage}(p)) <> 1 reportSet p end"];


abstract VertexClass NamedElementClass {qualifiedName: String};
VertexClass Comment {text: String};
BinaryEdgeClass Annotates from Comment role comment (0,*) (1,1) to NamedElementClass role annotatedElement (1,1) (1,1);
VertexClass Constraint {message: String, predicateQuery: String, offendingElementsQuery: String};

abstract VertexClass TypedElementClass : NamedElementClass {abstract : Boolean};
abstract VertexClass AttributedElementClass: TypedElementClass;
VertexClass GraphClass: AttributedElementClass ["There must be exactly one GraphClass." "count(V{structure.GraphClass}) = 1" "V{structure.GraphClass}"];
abstract VertexClass GraphElementClass: AttributedElementClass {minKappa: Integer, maxKappa : Integer};
BinaryEdgeClass MayBeNestedIn from GraphElementClass role nestedElement (0,*) (1,1) to GraphElementClass role nestingElement (0,*) (1,1);
VertexClass VertexClass: GraphElementClass;
VertexClass EdgeClass: GraphElementClass;
VertexClass BinaryEdgeClass: EdgeClass;

VertexClass IncidenceClass:TypedElementClass {direction: Direction, incidenceType: IncidenceType, maxEdgesAtVertex: Integer, minEdgesAtVertex: Integer, minVerticesAtEdge: Integer, maxVerticesAtEdge: Integer, roleName : String};
BinaryEdgeClass ConnectsToVertexClass from IncidenceClass role incidenceClassAtVertex  (0,*) (1,1) to VertexClass role connectedVertexClass (1,1) (1,1);
BinaryEdgeClass ConnectsToEdgeClass from IncidenceClass role incidenceClassAtEdge (0,*) (1,1) to EdgeClass role connectedEdgeClass (1,1) (1,1);
BinaryEdgeClass HidesIncidenceClassAtVertexClass from IncidenceClass role hidingIncidenceClassAtVertex (0,*) (1,1) to IncidenceClass role hiddenIncidenceClassAtVertex (0,*) (1,1);
BinaryEdgeClass HidesIncidenceClassAtEdgeClass from IncidenceClass role hidingIncidenceClassAtEdge (0,*) (1,1) to IncidenceClass role hiddenIncidenceClassAtEdge (0,*) (1,1);


abstract BinaryEdgeClass SpecializesTypedElementClass from abstract TypedElementClass role subclass (0,*) (1,1) to abstract TypedElementClass role superclass (0,*) (1,1);
BinaryEdgeClass SpecializesVertexClass: SpecializesTypedElementClass from VertexClass role subVertexClass:subclass (0,*) (1,1) to VertexClass role superVertexClass:superclass (0,*) (1,1);
BinaryEdgeClass SpecializesEdgeClass: SpecializesTypedElementClass from EdgeClass role subEdgeClass:subclass (0,*) (1,1) to EdgeClass role superEdgeClass:superclass (0,*) (1,1);
BinaryEdgeClass SpecializesIncidenceClass: SpecializesTypedElementClass from IncidenceClass role subIncidenceClass:subclass (0,*) (1,1) to IncidenceClass role superIncidenceClass:superclass (0,*) (1,1);

Comment structure.Attribute "The defaultValue is a string constant in TG syntax, compatible to the Domain of the Attribute.\ndefaultValue may be null (which means no default value is specified).";
VertexClass Attribute {name: String, defaultValue: String};
BinaryEdgeClass HasDomain from Attribute role attributeWithDomain (0,*) (1,1) to domains.Domain role domainOfAttribute (1,1) (1,1);
BinaryEdgeClass HasConstraint from AttributedElementClass role constrainedElement  (1,1) (1,1) to Constraint role constraint (0,*) (1,1) COMPOSITE;
BinaryEdgeClass HasAttribute from AttributedElementClass role attributedElement (1,1) (1,1) to Attribute role attribute (0,*) (1,1) COMPOSITE;
BinaryEdgeClass ContainsSubPackage from Package role superpackage (0,1) (1,1) to Package role subpackage (0,*) (1,1) COMPOSITE;
BinaryEdgeClass ContainsDomain from Package role packageOfDomain (1,1) (1,1) to domains.Domain role domainInPackage (0,*) (1,1) COMPOSITE;
BinaryEdgeClass ContainsGraphElementClass from Package role packageOfElement (1,1) (1,1) to GraphElementClass role packagedElement (0,*) (1,1) COMPOSITE;
BinaryEdgeClass ContainsDefaultPackage from Schema role schemaOfPackage (0,1) (1,1) to Package role defaultPackage (1,1) (1,1) COMPOSITE;
BinaryEdgeClass DefinesGraphClass from Schema role schemaOfGraphClass (1,1) (1,1) to GraphClass role graphClass (1,1) (1,1) COMPOSITE;


Package domains;
abstract VertexClass BasicDomain: Domain;
VertexClass SetDomain: CollectionDomain;
VertexClass StringDomain: BasicDomain;
VertexClass RecordDomain: Domain;
VertexClass IntegerDomain: BasicDomain;
VertexClass ListDomain: CollectionDomain;
VertexClass LongDomain: BasicDomain;
VertexClass MapDomain: Domain;
VertexClass EnumDomain: Domain {enumConstants: List<String>};
abstract VertexClass Domain: structure.NamedElementClass;
VertexClass DoubleDomain: BasicDomain;
VertexClass BooleanDomain: BasicDomain;
abstract VertexClass CollectionDomain: Domain;
BinaryEdgeClass HasBaseDomain from CollectionDomain role collectionDomain (0,*) (1,1) to Domain role baseDomain (1,1) (1,1);
BinaryEdgeClass HasValueDomain from MapDomain role mapDomainOfValue (0,*) (1,1) to Domain role valueDomain (1,1) (1,1);
BinaryEdgeClass HasKeyDomain from MapDomain role mapDomainOfKey (0,*) (1,1) to Domain role keyDomain (1,1) (1,1);
BinaryEdgeClass HasRecordDomainComponent from RecordDomain role recordDomainOfComponent (0,*) (1,1) to Domain role componentDomain (1,*)  (1,1)  AGGREGATE {name: String};

