DHHTGraph 1;

Schema de.uni_koblenz.jgralab.grumlschema.GrumlSchema;

GraphClass SchemaGraph;

Package ;
Package structure;
Comment structure.Direction "Direction viewed from vertex class.";
EnumDomain structure.Direction (VERTEX_TO_EDGE, EDGE_TO_VERTEX);
EnumDomain structure.IncidenceType (EDGE, AGGREGATION, COMPOSITION);


VertexClass Schema {name: String, packagePrefix: String};
VertexClass Package: NamedElement ["A Package must either be default or subpackage, but not both" "import structure.*; forall p: V{Package} @ (inDegree{ContainsDefaultPackage}(p) + inDegree{ContainsSubPackage}(p)) = 1" "import structure.*; from p: V{Package} with (inDegree{ContainsDefaultPackage}(p) + inDegree{ContainsSubPackage}(p)) <> 1 reportSet p end"];


abstract VertexClass NamedElementClass {qualifiedName: String};
VertexClass Comment {text: String};
EdgeClass Annotates from Comment (0,*) role comment to NamedElement (1,1) role annotatedElement;
VertexClass Constraint {message: String, predicateQuery: String, offendingElementsQuery: String};

abstract VertexClass TypedElementClass : NamedElementClass {abstract : boolean};
abstract VertexClass AttributedElementClass: TypedElementClass;
VertexClass GraphClass: AttributedElementClass ["There must be exactly one GraphClass." "count(V{structure.GraphClass}) = 1" "V{structure.GraphClass}"];
abstract VertexClass GraphElementClass: AttributedElementClass {minKappa: Integer, maxKappa : Integer};
EdgeClass MayBeNestedIn from GraphElementClass (0,*) role nestedElement to GraphElementClass (0,*) role nestingElement;
VertexClass VertexClass: GraphElementClass;
VertexClass EdgeClass: GraphElementClass;

VertexClass IncidenceClass:TypedElementClass {direction: Direction, incidenceType: IncidenceType, maxEdgesAtVertex: Integer, minxEdgesAtVertex: Integer, minVerticesAtEdge: Integer, maxVerticesAtEdge: Integer, roleName : String};
EdgeClass ConnectsToVertexClass from IncidenceClass role connectedIncidenceClass (0,*) (1,1) to VertexClass role connectedVertexClass (1,1) (1,1);
EdgeClass ConnectsToEdgeClass from IncidenceClass role connectedIncidenceClass  (0,*) (1,1) to EdgeClass role connectedEdgeClass (1,1) (1,1);
EdgeClass HidesIncidenceClassAtVertexClass from IncidenceClass role hidingIncidenceClassAtVertex (0,*) (1,1) to IncidenceClass role hiddenIncidenceClassAtVertex (0,*) (1,1);
EdgeClass HidesIncidenceClassAtEdgeClass from IncidenceClass role hidingIncidenceClassAtEdge (0,*) (1,1) to IncidenceClass role hiddenIncidenceClassAtEdge (0,*) (1,1);


abstract EdgeClass SpecializesTypedElementClass from TypedElementClass role subclass (0,*) (1,1) to TypedElementClass role superclass (0,*) (1,1);
EdgeClass SpecializesVertexClass: SpecializesTypedElementClass from VertexClass (0,*) (1,1) to VertexClass (0,*) (1,1);
EdgeClass SpecializesEdgeClass: SpecializesTypedElementClass from EdgeClass (0,*) (1,1) to EdgeClass (0,*) (1,1);
EdgeClass SpecializesIncidenceClass: SpecializesTypedElementClass from IncidenceClass (0,*) (1,1) to IncidenceClass (0,*) (1,1);

Comment structure.Attribute "The defaultValue is a string constant in TG syntax, compatible to the Domain of the Attribute.\ndefaultValue may be null (which means no default value is specified).";
VertexClass Attribute {name: String, defaultValue: String};
EdgeClass HasDomain from Attribute (0,*) (1,1) to domains.Domain role domain (1,1) (1,1);
EdgeClass HasConstraint from AttributedElementClass role constrainedElement  (1,1) (1,1) to Constraint role constraint (0,*) (1,1) aggregation composite;
EdgeClass HasAttribute from AttributedElementClass (1,1) (1,1) to Attribute role attribute (0,*) (1,1) aggregation composite;
EdgeClass ContainsSubPackage from Package (0,1) (1,1) to Package role subpackage (0,*) (1,1) aggregation composite;
EdgeClass ContainsDomain from Package (1,1) (1,1) to domains.Domain (0,*) (1,1) aggregation composite;
EdgeClass ContainsGraphElementClass from Package (1,1) (1,1) to GraphElementClass (0,*) (1,1) aggregation composite;
EdgeClass ContainsDefaultPackage from Schema (0,1) (1,1) to Package (1,1) (1,1) aggregation composite;
EdgeClass DefinesGraphClass from Schema (1,1) (1,1) to GraphClass role graphClass (1,1) (1,1) aggregation composite;


Package domains;
abstract VertexClass BasicDomain: Domain;
VertexClass SetDomain: CollectionDomain;
VertexClass StringDomain: BasicDomain;
VertexClass RecordDomain: Domain;
VertexClass IntegerDomain: BasicDomain;
VertexClass ListDomain: CollectionDomain;
VertexClass LongDomain: BasicDomain;
VertexClass MapDomain: Domain;
VertexClass EnumDomain: Domain {enumConstants: List<String>};
abstract VertexClass Domain: structure.NamedElement;
VertexClass DoubleDomain: BasicDomain;
VertexClass BooleanDomain: BasicDomain;
abstract VertexClass CollectionDomain: Domain;
EdgeClass HasBaseDomain from CollectionDomain (0,*) (1,1) to Domain role basedomain (1,1) (1,1);
EdgeClass HasValueDomain from MapDomain (0,*) (1,1) to Domain role valuedomain (1,1) (1,1);
EdgeClass HasKeyDomain from MapDomain (0,*) (1,1) to Domain role keydomain (1,1) (1,1);
EdgeClass HasRecordDomainComponent from RecordDomain (0,*) (1,1) to Domain role componentdomain (1,*)  (1,1)  aggregation shared {name: String};

